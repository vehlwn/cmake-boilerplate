if(NOT USE_CONAN)
    find_package(Boost REQUIRED COMPONENTS random regex)
    find_package(ICU REQUIRED COMPONENTS uc i18n io)
endif()

set(TARGET random)
add_executable(${TARGET} random.cpp)
if(USE_CONAN)
    target_link_libraries(${TARGET} PRIVATE ${CONAN_LIBS})
else()
    target_include_directories(${TARGET} SYSTEM PUBLIC ${Boost_INCLUDE_DIRS})
    target_link_libraries(${TARGET} PUBLIC ${Boost_LIBRARIES})
endif()
target_compile_options(${TARGET} PRIVATE ${HARDEN_CXX_OPTIONS})
target_compile_definitions(${TARGET} PRIVATE ${HARDEN_CXX_DEFINITIONS})

set(TARGET codepoints-boost-regex)
add_executable(${TARGET} codepoints-boost-regex.cpp)
if(USE_CONAN)
    target_link_libraries(${TARGET} PRIVATE ${CONAN_LIBS})
else()
    target_include_directories(
        ${TARGET} SYSTEM PUBLIC ${Boost_INCLUDE_DIRS} ${ICU_INCLUDE_DIRS}
    )
    target_link_libraries(${TARGET} PUBLIC ${Boost_LIBRARIES} ${ICU_LIBRARIES})
endif()
target_compile_options(${TARGET} PRIVATE ${HARDEN_CXX_OPTIONS})
target_compile_definitions(${TARGET} PRIVATE ${HARDEN_CXX_DEFINITIONS})

set(TARGET bench-codepoints)
add_executable(${TARGET} bench-codepoints.cpp)
if(USE_CONAN)
    target_link_libraries(${TARGET} PRIVATE ${CONAN_LIBS})
else()
    target_include_directories(
        ${TARGET} SYSTEM PUBLIC ${Boost_INCLUDE_DIRS} ${ICU_INCLUDE_DIRS}
    )
    target_link_libraries(${TARGET} PUBLIC ${Boost_LIBRARIES} ${ICU_LIBRARIES})
endif()
target_compile_options(${TARGET} PRIVATE ${HARDEN_CXX_OPTIONS})
target_compile_definitions(${TARGET} PRIVATE ${HARDEN_CXX_DEFINITIONS})

set(TARGET icu-normalize)
add_executable(${TARGET} icu-normalize.cpp)
if(USE_CONAN)
    target_link_libraries(${TARGET} PRIVATE ${CONAN_LIBS})
else()
    target_include_directories(${TARGET} SYSTEM PUBLIC ${ICU_INCLUDE_DIRS})
    target_link_libraries(${TARGET} PUBLIC ${ICU_LIBRARIES})
endif()
target_compile_options(${TARGET} PRIVATE ${HARDEN_CXX_OPTIONS})
target_compile_definitions(${TARGET} PRIVATE ${HARDEN_CXX_DEFINITIONS})
